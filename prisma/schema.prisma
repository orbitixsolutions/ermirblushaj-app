// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
}

enum MatchStatus {
  PENDING
  LIVE
  COMPLETED
}

enum TournamentPhase {
  NONE
  EIGHTH
  QUARTER
  SEMIFINALS
  FINAL
}

enum TournamentStatus {
  WINNER
  LOSER
  DEFAULT
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String?  @unique
  password String?
  role     UserRole @default(ADMIN)
}

model Team {
  id      String  @id @unique
  groupId String?
  name    String
  logo    String?

  phase        TournamentPhase  @default(NONE)
  isEliminated Boolean          @default(false)
  stageStatus  TournamentStatus @default(DEFAULT)
  position     Int?

  createdDate DateTime @default(now())

  group   Group?   @relation(fields: [groupId], references: [id])
  players Player[]

  teamA Match[] @relation("TeamA")
  teamB Match[] @relation("TeamB")

  teamKeyA MatchKey[] @relation("TeamKeyA")
  teamKeyB MatchKey[] @relation("TeamKeyB")

  teamStats   TeamStats?
  playerStats PlayerStats[]

  matchHistory    MatchHistory[]
  MatchKeyHistory MatchKeyHistory[]
}

model TeamStats {
  teamId       String @id @unique
  currentGoals Int?   @default(0)

  points         Int? @default(0)
  goalsFor       Int? @default(0)
  goalsAgainst   Int? @default(0)
  goalDifference Int? @default(0)

  matchPlayed Int? @default(0)
  matchWin    Int? @default(0)
  matchLoss   Int? @default(0)
  matchDraw   Int? @default(0)

  team Team @relation(fields: [teamId], references: [id])
}

model Player {
  id           String   @id @unique
  teamId       String
  teamName     String?
  dateOfBirth  String?
  height       String?
  position     String?
  number       String?
  profilePhoto String?
  firstName    String
  lastName     String
  nationality  String?
  footed       String?
  createdDate  DateTime @default(now())

  playerStatus PlayerStats?
  team         Team         @relation(fields: [teamId], references: [id])
}

model PlayerStats {
  firstName String
  lastName  String
  playerId  String @id @unique
  goals     Int?   @default(0)
  teamId    String

  playerStatus Player @relation(fields: [playerId], references: [id])
  Team         Team?  @relation(fields: [teamId], references: [id])
}

model TournamentGallery {
  id        String   @id @unique
  url       String
  createdAt DateTime @default(now())
}

model TributeGallery {
  id        String   @id @unique
  url       String
  createdAt DateTime @default(now())
}

model Match {
  id            String      @id @unique @default(uuid())
  teamAId       String
  teamBId       String
  status        MatchStatus @default(PENDING)
  playStartDate String?
  playEndDate   String?
  createdDate   DateTime    @default(now())

  teamA Team @relation("TeamA", fields: [teamAId], references: [id])
  teamB Team @relation("TeamB", fields: [teamBId], references: [id])

  matchHistory MatchHistory[]
}

model MatchKey {
  id      String @id @unique @default(uuid())
  teamAId String
  teamBId String

  loserId  String?
  winnerId String?

  order Int @default(autoincrement())

  phase  TournamentPhase @default(EIGHTH)
  status MatchStatus     @default(PENDING)

  matchStatus String @default("DEFAULT")

  playStartDate String?
  playEndDate   String?
  createdDate   DateTime @default(now())
  column        String

  teamKeyA Team @relation("TeamKeyA", fields: [teamAId], references: [id])
  teamKeyB Team @relation("TeamKeyB", fields: [teamBId], references: [id])

  matchKeyHistory MatchKeyHistory[]
}

model MatchKeyHistory {
  id      String @id @default(uuid())
  teamId  String
  result  String
  matchId String

  team     Team     @relation(fields: [teamId], references: [id])
  matchKey MatchKey @relation(fields: [matchId], references: [id])
}

model MatchHistory {
  id      String @id @default(uuid())
  teamId  String
  result  String
  matchId String

  team  Team  @relation(fields: [teamId], references: [id])
  match Match @relation(fields: [matchId], references: [id])
}

model Group {
  id    String @id @unique @default(uuid())
  name  String
  teams Team[]
}
